@startuml
'https://plantuml.com/component-diagram

node "Client (via HTTP)"{
    () request
    () response
}


node "Backend Infrastructure 1"{
    package "Node-js" {

        package "Express-js" {
            frame "middleware"{
                [AuthMiddleware]
                [CorsMiddleware]
                [LoggerMiddleware]
                [ValidationMiddleware]
            }

            frame "routes"{
                [AccountRoute]
                [AuthRoute]
                [CartRoute]
                [OrderRoute]
                [ProductRoute]
            }
        }
    }
}

node "Business Logic"{

    frame "controllers"{
        [ErrorController]
        [AccountController]
        [AuthController]
        [CartController]
        [ProductController]
        [CheckoutController]
    }

    frame "services"{
        [AccountService]
        [AuthService]
        [CartService]
        [ProductService]
        [CheckoutService]
    }

    frame "models"{
        [AccountModel]
        [CartModel]
        [ProductModel]
        [OrderModel]
    }
}

node "Backend Infrastructure 2"{
    [Mongoose]

    frame "repositories"{
        [AccountRepository]
        [CartRepository]
        [ProductRepository]
        [UserRepository]
    }

    database "MongoDB" {

    }

}

request -left-> [LoggerMiddleware]
[LoggerMiddleware] -up-> response
[LoggerMiddleware] -down-> [ValidationMiddleware]
[ValidationMiddleware] --> [ErrorController]

[ValidationMiddleware] --> [CorsMiddleware]
[ValidationMiddleware] <--> "models" : Schema based validation (type, format, constraints)
[CorsMiddleware] <-right-> [AuthMiddleware]
[CorsMiddleware] -down-> "routes"

[AuthMiddleware] <--> [AuthRoute]
[AuthRoute] <--> [AuthController]
[AuthController] <--> [AuthService]

[AccountRoute] -down-> [AccountController]
[CartRoute] -down-> [CartController]
[OrderRoute] -down-> [CheckoutController]
[ProductRoute] -down-> [ProductController]

[AccountController] <--> [AccountService]
[CartController] <--> [CartService]
[ProductController] <--> [ProductService]
[CheckoutController] <--> [CheckoutService]
"controllers" --> [LoggerMiddleware] : Every response first visits the logger


"services" <--> "models" : First getting data schemes
"services" <--> [ErrorController] : Every service can throw an error
"services" <-down-> [Mongoose] : Then heading to DB
[Mongoose] <-down-> "repositories" : Conversing with backend persistence layer
"repositories" <-down-> "MongoDB"























@enduml